# .github/workflows/deploy.yml

name: Loark CI/CD

on:
  push:
    branches: [ "deploy-debug-wildmental-0829" ]
  pull_request:
    branches: [ "deploy-debug-wildmental-0829" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. GitHub 리포지토리의 코드를 Runner로 가져옵니다.
      - name: Checkout
        uses: actions/checkout@v3

      # 2. JDK 17을 설치합니다.
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. gradlew 파일에 실행 권한을 부여합니다.
      - name: Grant execute permission for gradlew
        working-directory: ./Loark
        run: chmod +x gradlew

      # 4. Gradle로 프로젝트를 빌드합니다.
      - name: Build with Gradle
        working-directory: ./Loark
        run: ./gradlew build -x test

      # 5. AWS ECR에 접근하기 위한 자격 증명을 설정합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 6. AWS ECR에 로그인합니다.
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 7. Docker 이미지를 빌드하고 ECR에 푸시합니다.
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        working-directory: ./Loark
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # 8. SSH Agent 설정 (가장 안전한 방식)
      # SSH 키를 파일로 만들지 않고 Agent에 로드합니다.
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.AWS_EC2_KEY }}
          
      # 9. Bastion을 통해 Private EC2에 배포
      # ssh -J (ProxyJump)를 사용하여 한 번에 깔끔하게 명령을 실행합니다.
      - name: Deploy to Private EC2 via Bastion Host
        run: |
          ssh -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -J ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} \
            ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST_PRIVATE }} \
            "bash ~/deploy.sh '${{ steps.build-image.outputs.image }}'"
