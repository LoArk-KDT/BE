# .github/workflows/deploy.yml

name: Loark CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # ✅ [디버깅용 스텝 추가] 모든 환경 변수를 출력하여 확인합니다.
      - name: Print all environment variables
        run: env | sort
        
      # 1. GitHub 리포지토리의 코드를 Runner로 가져옵니다.
      - name: Checkout
        uses: actions/checkout@v3

      # 2. JDK 17을 설치합니다.
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. gradlew 파일에 실행 권한을 부여합니다.
      # 프로젝트 구조에 맞게 working-directory를 설정하세요.
      # 만약 프로젝트 루트에 gradlew가 있다면 working-directory는 필요 없습니다.
      - name: Grant execute permission for gradlew
        working-directory: ./Loark
        run: chmod +x gradlew

      # 4. Gradle로 프로젝트를 빌드합니다.
      - name: Build with Gradle
        working-directory: ./Loark
        run: ./gradlew build -x test

      # 5. AWS ECR에 접근하기 위한 자격 증명을 설정합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 6. AWS ECR에 로그인합니다.
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 7. Docker 이미지를 빌드하고 ECR에 푸시합니다.
      - name: Build, tag, and push image to Amazon ECR
        working-directory: ./Loark
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 8. 배포 스텝 이전에 강제로 프록시 설정을 해제합니다.
      - name: Unset proxy variables
        run: |
          unset http_proxy
          unset https_proxy
          echo "Proxy environment variables have been unset."

      # 9. Bastion Host를 통해 Private EC2에 접속하여 배포 스-크립트를 실행합니다.
      - name: Deploy to EC2 via Bastion
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}        # Bastion Host의 Public IP
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          script: |
            # Bastion 서버에서 Private EC2로 SSH 접속하여 deploy.sh를 실행합니다.
            # -o StrictHostKeyChecking=no 옵션은 호스트 키 확인을 건너뛰어 CI/CD 환경에 유용합니다.
            # Bastion 서버의 홈 디렉터리에 Private EC2 접속용 키 파일(예: key.pem)이 미리 복사되어 있어야 합니다.
            ssh -o StrictHostKeyChecking=no -i ~/key.pem ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST_PRIVATE }} " \
              sh ~/deploy.sh \
                '${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest'
            "
