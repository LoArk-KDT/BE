# .github/workflows/deploy.yml

name: Loark CI/CD for Private EC2

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  #########################################
  # 1. Docker 이미지를 빌드하고 ECR에 푸시 #
  #########################################
  build-and-push-to-ecr:
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.build-image.outputs.image }} # 다음 Job에서 사용할 이미지 URI를 출력으로 지정

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # working-directory를 사용하여 Loark 폴더 내부에서 명령어 실행
      - name: Grant execute permission for gradlew
        working-directory: ./Loark
        run: chmod +x gradlew

      - name: Build with Gradle
        working-directory: ./Loark
        run: ./gradlew build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Dockerfile이 Loark 폴더 안에 있다고 가정하고 빌드 경로를 ./Loark로 지정
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }} # 'latest' 대신 고유한 커밋 해시를 태그로 사용
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./Loark
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  #############################################
  # 2. EC2에 접속하여 새 Docker 컨테이너를 실행 #
  #############################################
  deploy-to-ec2:
    needs: build-and-push-to-ecr # build-and-push-to-ecr 작업이 성공해야 실행
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to EC2 via Bastion Host
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.BASTION_HOST }} # Bastion 호스트에 접속
        username: ec2-user
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Bastion 호스트를 통해 Private EC2 인스턴스로 SSH 접속하여 배포 스크립트 실행
          # 이전 Job에서 생성한 이미지 URI를 인자로 전달
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.BACKEND_PRIVATE_IP }} \
            'bash -s' < <(echo "export IMAGE_URI=${{ needs.build-and-push-to-ecr.outputs.image_uri }} && \
                                export AWS_REGION=${{ secrets.AWS_REGION }} && \
                                export SECRETS_MANAGER_ARN=${{ secrets.SECRETS_MANAGER_ARN }} && \
                                sh ~/deploy.sh")
