# .github/workflows/deploy.yml

name: Loark CI/CD for Private EC2

on:
  push:
    branches: [ "master" ]
  # PULL REQUEST 트리거 제거
  # pull_request:
  #   branches: [ "master" ]

jobs:
  #########################################
  # 1. Docker 이미지를 빌드하고 ECR에 푸시 #
  #########################################
  build-and-push-to-ecr:
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.build-image.outputs.image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        working-directory: ./Loark
        run: chmod +x gradlew

      - name: Build with Gradle
        working-directory: ./Loark
        run: ./gradlew build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./Loark
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  #############################################
  # 2. EC2에 접속하여 새 Docker 컨테이너를 실행 #
  #############################################
  deploy-to-ec2: # ✅ build-and-push-to-ecr와 동일한 수준으로 들여쓰기
    needs: build-and-push-to-ecr
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to EC2 via Bastion using Manual SSH
      run: |
        # 1. ssh-agent를 시작합니다.
        eval "$(ssh-agent -s)"

        # 2. Private Key를 파일로 저장합니다.
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
        chmod 600 private_key.pem

        # 3. ssh-agent에 Private Key를 추가합니다.
        ssh-add private_key.pem

        # 4. Bastion Host를 통해 Backend 서버에 접속하여 배포 스크립트를 실행합니다.
        ssh -o StrictHostKeyChecking=no -A ec2-user@${{ secrets.BASTION_HOST }} << ENDSSH
          echo "Successfully connected to Bastion Host. Now connecting to Backend..."
          ssh -o StrictHostKeyChecking=no -A ec2-user@${{ secrets.BACKEND_PRIVATE_IP }} \
            'bash -s' < <(echo "export IMAGE_URI=${{ needs.build-and-push-to-ecr.outputs.image_uri }} && \
                                export AWS_REGION=${{ secrets.AWS_REGION }} && \
                                export SECRETS_MANAGER_ARN=${{ secrets.SECRETS_MANAGER_ARN }} && \
                                sh ~/deploy.sh")
        ENDSSH
