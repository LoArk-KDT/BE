# .github/workflows/deploy.yml

name: Loark CI/CD for Private EC2

on:
  push:
    branches: [ "master" ]

jobs:
  #########################################
  # 1. Docker 이미지를 빌드하고 ECR에 푸시 #
  #########################################
  build-and-push-to-ecr:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        working-directory: ./Loark
        run: chmod +x gradlew

      - name: Build with Gradle
        working-directory: ./Loark
        run: ./gradlew build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG ./Loark
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG
          # echo "image=..." 라인도 더 이상 필요 없으므로 삭제합니다.

  #############################################
  # 2. EC2에 접속하여 새 Docker 컨테이너를 실행 #
  #############################################
  deploy-to-ec2:
    needs: build-and-push-to-ecr # CI 작업이 성공해야 실행됩니다.
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to EC2
      run: |
        eval "$(ssh-agent -s)"
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        ssh-add private_key.pem

        # ✅ 아주 간단해진 스크립트 실행 부분
        ssh -o StrictHostKeyChecking=no -A ec2-user@${{ secrets.BASTION_HOST }} << ENDSSH
          echo "Successfully connected to Bastion Host. Now connecting to Backend..."
          ssh -o StrictHostKeyChecking=no -A ec2-user@${{ secrets.BACKEND_PRIVATE_IP }} 'sh ~/deploy.sh'
        ENDSSH
