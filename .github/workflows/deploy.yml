# .github/workflows/deploy.yml

name: Loark CI/CD

on:
  push:
    branches: [ "master" ] # 1. master 브랜치에 push(merge)될 때
  pull_request:
    branches: [ "master" ] # 2. master 브랜치로 pull request가 생성/업데이트될 때

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. GitHub 리포지토리의 코드를 Runner로 가져옵니다.
      - name: Checkout
        uses: actions/checkout@v3

      # 2. JDK 17을 설치합니다.
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. gradlew 파일에 실행 권한을 부여합니다.
      - name: Grant execute permission for gradlew
        working-directory: ./Loark # ✅ Loark 디렉터리로 이동
        run: chmod +x gradlew

      # 4. Gradle로 프로젝트를 빌드합니다.
      - name: Build with Gradle
        working-directory: ./Loark # ✅ Loark 디렉터리로 이동
        run: ./gradlew build -x test # 테스트는 생략하고 빌드

      # 5. AWS ECR에 접근하기 위한 자격 증명을 설정합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 6. AWS ECR에 로그인합니다.
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 7. Docker 이미지를 빌드하고 ECR에 푸시합니다.
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 8. EC2에 접속하여 배포 스크립트를 실행합니다.
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          script: |
            # deploy.sh 스크립트에 필요한 모든 정보를 인자로 전달합니다.
            # 각 비밀 값은 따옴표로 감싸서 안전하게 전달합니다.
            sh ~/deploy.sh \
              "${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest" \
              "${{ secrets.DB_URL }}" \
              "${{ secrets.DB_USERNAME }}" \
              "${{ secrets.DB_PASSWORD }}" \
              "${{ secrets.JWT_SECRET }}" \
              "${{ secrets.GOOGLE_CLIENT_ID }}" \
              "${{ secrets.GOOGLE_CLIENT_SECRET }}" \
              "${{ secrets.AWS_S3_ACCESS_KEY }}" \
              "${{ secrets.AWS_S3_SECRET_KEY }}" \
              "${{ secrets.AWS_S3_REGION }}" \
              "${{ secrets.AWS_S3_IMAGES }}" \
              "${{ secrets.AWS_S3_JSON }}" \
              "${{ secrets.CLOVA_OCR_URL }}" \
              "${{ secrets.CLOVA_OCR_SECRET_KEY }}" \
              "${{ secrets.LOARK_STAT_API }}"