spring.application.name=Loark


# --- HikariCP Connection Pool 안정성 설정 추가 ---
# 풀에서 커넥션을 가져올 때 유효한지 확인하기 위한 대기 시간 (3초)
# 3초 안에 응답이 없으면 비정상 커넥션으로 간주하고 버립니다.
spring.datasource.hikari.validation-timeout=3000
# 커넥션이 유휴 상태로 유지될 수 있는 최대 시간 (10분)
# 10분이 지난 커넥션은 풀에서 제거되어 stale connection을 방지합니다.
spring.datasource.hikari.max-lifetime=600000

# postgresql
# 커넥션 풀이 살아있는지 주기적으로 확인하기 위한 간단한 쿼리
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.default_schema=app

spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

logging.level.org.hibernate.SQL=debug

app.jwt.secret= ${JWT_SECRET}
app.jwt.expiry-minutes=60

app.cookie.domain=loark.kr
app.cookie.secure=true
app.cookie.same-site=None
server.port=8080
app.frontend.redirect=https://loark.kr

# google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri=https://api.loark.kr/login/oauth2/code/google
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# aws
cloud.aws.credentials.access-key=${AWS_S3_ACCESS_KEY}
cloud.aws.credentials.secret-key=${AWS_S3_SECRET_KEY}
cloud.aws.region.static=${AWS_S3_REGION}
s3.bucket.images=${AWS_S3_IMAGES}
s3.bucket.json=${AWS_S3_JSON}

# --- Naver Clova OCR ?? ---
clova.ocr.api-url=${CLOVA_OCR_URL}
clova.ocr.secret-key=${CLOVA_OCR_SECRET_KEY}

# --- LoArk Statistics API ---
statistics.api.base-url=${LOARK_STAT_API}
